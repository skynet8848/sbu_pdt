from django.db.models import Q
from django.shortcuts import render_to_response
from models import Capacity
from models import Testbed
from models import Modulelist
import datetime
import operator
from django.http import HttpResponse
import string
import re
import commands

def testbed_search(request):
    query = request.GET.get('q','')
    para_list=request.GET.lists()
    if query:
        if len(para_list)>1:
            option_list=para_list[1][1]
            predicates=[]
            for item in option_list:
                if (item=='Testbed_Owner'):
                    predicates.append(('%s__username__icontains' % item, '%s' % query))
                else:
                    predicates.append(('%s__icontains' % item, '%s' % query))
            q_list=[Q(x) for x in predicates]
            results = Testbed.objects.filter(reduce(operator.or_, q_list)).distinct().order_by('Index_Number')
            option=string.join(option_list,' or ')
        else:
            qset = (
            Q(Testbed_Number__icontains=query) |
            Q(Testbed_Name__icontains=query) |
            Q(Testbed_Owner__username__icontains=query) |
            Q(Platform__icontains=query)  
            )
            results = Testbed.objects.filter(qset).distinct().order_by('Index_Number')
            option="All" 
    else:
        results = []
        option="All"
    results_all= Testbed.objects.all().order_by('Index_Number')
    if results:
        for item in results:
                if re.search(r'10.208.85.108', item.Testbed_Location):
                    if item.Control_Information:
                        ip=item.Control_Information.split('/')[0]
                        (status, output) = commands.getstatusoutput("snmpwalk -c public -v 1 -t 10 %s 1.3.6.1.2.1.1.1 | gawk '{print $12}'" % ip)
                        if re.search(r'Timeout', output):
                            item.Testbed_Version = "N/A"
                        else:
                            item.Testbed_Version = output
                    else:
                        item.Testbed_Version = "N/A"
                else:
                    item.Testbed_Version = "N/A"
                item.save()
    if results_all:
        for item in results_all:
                if re.search(r'10.208.85.108', item.Testbed_Location):
                    if item.Control_Information:
                        ip=item.Control_Information.split('/')[0]
                        (status, output) = commands.getstatusoutput("snmpwalk -c public -v 1 -t 10 %s 1.3.6.1.2.1.1.1 | gawk '{print $12}'" % ip)
                        if re.search(r'Timeout', output):
                            item.Testbed_Version = "N/A"
                        else:
                            item.Testbed_Version = output
                    else:
                        item.Testbed_Version = "N/A"
                else:
                    item.Testbed_Version = "N/A"
                item.save() 
    return render_to_response("testbed_search.html", {
        "results": results,
        "results_all": results_all,
        "query": query,
        "option": option,
    })

def capacity_search(request):
    query = request.GET.get('q','')
    para_list=request.GET.lists()
    if query:
        if len(para_list)>1:
            option_list=para_list[1][1]
            predicates=[]
            for item in option_list:
                if (item=='module_owner'):
                    predicates.append(('%s__username__icontains' % item, '%s' % query))
                elif (item=='testbed_name'):
                    predicates.append(('%s__Testbed_Name__icontains' % item, '%s' % query))
                else:
                    predicates.append(('%s__icontains' % item, '%s' % query))
            q_list=[Q(x) for x in predicates]
            results = Capacity.objects.filter(reduce(operator.or_, q_list)).distinct().order_by('index_number')
            option=string.join(option_list,' or ') 
        else:
            qset = (
            Q(index_number__icontains=query) |
            Q(module_name__icontains=query) |
            Q(capacity_number__icontains=query) |
            Q(traffic_load__icontains=query) |
            Q(session_number__icontains=query) |
            Q(module_owner__username__icontains=query) | 
            Q(testbed_name__Testbed_Name__icontains=query)
            )
            results = Capacity.objects.filter(qset).distinct().order_by('index_number')
            option="All"
    else:
        results = []
        option="All"
    results_all= Capacity.objects.all().order_by('index_number')
    return render_to_response("capacity_search.html", {
        "results": results,
        "results_all": results_all,
        "query": query,
        "option": option,
    })

def module_list(request, para_list):
    [testbed_number,testbed_mode,version_number]=para_list.split('_')
    #qset = (
    #        Q(testbed_number__icontains=testbed_number) & 
    #        Q(testbed_mode__testbed_mode.mode_name__exect=testbed_mode) &
    #        Q(version_number__version_number__exect=version_number)
    #    )
    module_list=Modulelist.objects.filter(testbed_number=testbed_number,testbed_mode__mode_name=testbed_mode,version_number__version_number=version_number).distinct()[0].module_list.all()
    list=[]
    for i in range(len(module_list)):
        list.append(module_list[i].module_name)
        
    results=string.join(list,'/')
    capacity_list=[]
    queryset=Capacity.objects.all()
    for p in queryset:
        if p.module_name in list:
            capacity_list.append(p)
    #html = "<html><body>It is now %s %s %s %s.</body></html>" % (testbed_number,testbed_mode,version_number,capacity_list[0].traffic_load)
    #return HttpResponse(html)
    return render_to_response("testbed_mode.html", {
        "results": results,
        "capacity_list": capacity_list,
        "testbed_number": testbed_number,
        "testbed_mode": testbed_mode,
        "version_number": version_number,
    })

def module_version(request, version_number):
    module=Modulelist.objects.all()
    module_list=Modulelist.objects.filter(version_number__version_number=version_number).all()[0].module_list.all()
    item_list=[]
    for item in module:
        for re in item.module_list.all():
           item_list.append(re.module_name)
    list=[]
    for i in range(len(module_list)):
        list.append(module_list[i].module_name)

    results=string.join(list,'/')
    html = "<html><body>It is now %s.</body></html>" % item_list
    return HttpResponse(html)
def testtools_search(request, testtools_name):
    if not re.findall("\(\d+\.\d+\.\d+\.\d+\)",testtools_name):
        testtools_name=testtools_name+"\(\d+\.\d+\.\d+\.\d+\)"
    else:
        testtools_name=testtools_name.replace('(','\(')
        testtools_name=testtools_name.replace(')','\)')
        testtools_name=testtools_name.replace('.','\.')
    testbed_list=Testbed.objects.all()
    #testbed_list=Testbed.objects.filter(Test_Tools_Information_Chassis=testtools_name).all()[0].module_list.all()
    #testbed_list=Testbed.objects.filter(Test_Tools_Information_Chassis=testtools_name).all()
    item_list=[]
    ixload_list=[]
    avalanche_list=[]
    ixexplorer_list=[]
    testnumber_list=[]
    for item in testbed_list:
        item_list.append(item.Test_Tools_Information_Chassis)
        if re.findall("%s:\d+/\d+\[\d+:\d+\]" % testtools_name,item.Test_Tools_Information_Chassis):
            for temp in (re.findall("%s:\d+/\d+\[\d+:\d+\]" % testtools_name,item.Test_Tools_Information_Chassis)):
                temp_list=["%s" % temp, "%s" % item.Testbed_Number]
                ixload_list.append(temp_list)
        #if re.findall("IxExplorer\(\d+\.\d+\.\d+\.\d+\):\d+/\d+\[\d+:\d+\]",item.Test_Tools_Information_Chassis):
        #    for temp in (re.findall("IxExplorer\(\d+\.\d+\.\d+\.\d+\):\d+/\d+\[\d+:\d+\]",item.Test_Tools_Information_Chassis)):
        #        temp_list=["%s" % temp, "%s" % item.Testbed_Number]
        #        ixexplorer_list.append(temp_list)
        #if re.findall("Avalanche\(\d+\.\d+\.\d+\.\d+\):\d+\[\d+\]",item.Test_Tools_Information_Chassis):
        #    for temp in (re.findall("Avalanche\(\d+\.\d+\.\d+\.\d+\):\d+\[\d+\]",item.Test_Tools_Information_Chassis)):
        #        temp_list=["%s" % temp, "%s" % item.Testbed_Number]
        #        avalanche_list.append(temp_list)
        
        #testnumber_list.append(item.Testbed_Number)
    #ixload_list = re.findall("IxLoad\(\d+\.\d+\.\d+\.\d+\):\d+/\d+\[\d+:\d+\]",item_list[0])
    #html = "<html><body>It is now %s.</body></html>" % ixload_list
    #return HttpResponse(html)
    ixload=[]
    ixload_all_list=[]
    ixload_active=[]
    for item in ixload_list:
        ixload_active.append([re.findall("%s" % testtools_name,item[0])[0],re.findall("\d+/\d+",item[0])[0],item[1]])
        if not re.findall("%s:\d+/" % testtools_name,item[0])[0] in ixload:
            ixload.append(re.findall("%s:\d+/" % testtools_name,item[0])[0])
            max_slot,max_port=re.findall("\d+:\d+",item[0])[0].split(':')
            slot,port=re.findall("\d+/\d+",item[0])[0].split('/')
            rowspan=int(max_port)
            ixload_all=[]
            for port_num in range(int(max_port)):
                ixload_all.append([re.findall("%s" % testtools_name,item[0])[0],"%s/%s" % (slot,port_num+1),'Null',"%s" % rowspan])    
            ixload_all_list.append(ixload_all)
    for item in ixload_list:
        for j in range(len(ixload_all_list)):
            for i in range(len(ixload_all_list[j])):
                if re.findall("%s" % testtools_name,item[0])[0]==ixload_all_list[j][i][0] and re.findall("\d+/\d+",item[0])[0]==ixload_all_list[j][i][1]:
                    ixload_all_list[j][i][2]=item[1]
                    
    #html = "<html><body>It is now %s.</body></html>" % testtools_name
    #return HttpResponse(html)
    return render_to_response("testtools_search.html", {
        "ixload_all_list": ixload_all_list,
        "avalanche_list": avalanche_list,
        "ixexplorer_list": ixexplorer_list,
    })
# Create your views here.
